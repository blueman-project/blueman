#!/usr/bin/python

import os.path
import sys
import signal
import dbus, dbus.glib
from blueman.Constants import *
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from gi.repository import GObject
from blueman.bluez.BlueZInterface import BlueZInterface

#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if os.path.exists(os.path.join(_dirname, "CHANGELOG.md")):
    sys.path.insert(0, _dirname)

from blueman.Functions import *
from blueman.main.Device import Device
from blueman.bluez.Device import Device as BluezDevice
from blueman.gui.manager.ManagerDeviceList import ManagerDeviceList
from blueman.gui.manager.ManagerToolbar import ManagerToolbar
from blueman.gui.manager.ManagerMenu import ManagerMenu
from blueman.gui.manager.ManagerStats import ManagerStats
from blueman.gui.manager.ManagerProgressbar import ManagerProgressbar
from blueman.main.Config import Config

from blueman.gui.MessageArea import MessageArea

from blueman.main.PluginManager import PluginManager
import blueman.plugins.manager
from blueman.plugins.ManagerPlugin import ManagerPlugin

# Workaround introspection bug, gnome bug 622084
signal.signal(signal.SIGINT, signal.SIG_DFL)

enable_rgba_colormap()


class Blueman:
    def __init__(self):

        self.Builder = Gtk.Builder()
        self.Builder.set_translation_domain("blueman")
        self.Builder.add_from_file(UI_PATH + "/manager-main.ui")

        self.window = self.Builder.get_object("window")

        self.Plugins = PluginManager(ManagerPlugin, blueman.plugins.manager, None)
        self.Plugins.Load()

        vbox = self.Builder.get_object("vbox1")
        area = MessageArea()
        vbox.pack_start(area, False, False, 0)
        vbox.reorder_child(area, 3)

        # Add padding for resize grip or it will overlap
        if self.window.get_has_resize_grip():
            align3 = self.Builder.get_object("alignment3")
            top, bottom, left, right = align3.get_padding()
            align3.set_padding(top, bottom, left, right + 10)

        def do_present(time):
            if self.window.props.visible:
                self.window.present_with_time(time)

        check_single_instance("blueman-manager", do_present)

        def on_window_delete(window, event):
            (x, y) = self.window.get_size()
            self.Config.props.window-height = y
            self.Config.props.window-width = x

            (x, y) = self.window.get_position()
            self.Config.props.window-posx = x
            self.Config.props.window-posy = y
            Gtk.main_quit()

        def on_property_changed(config, key, value):
            if key == "show-toolbar":
                if value:
                    self.Builder.get_object("toolbar2").props.visible = True
                else:
                    self.Builder.get_object("toolbar2").props.visible = False
            elif key == "show-statusbar":
                if value:
                    self.Builder.get_object("statusbar").props.visible = True
                else:
                    self.Builder.get_object("statusbar").props.visible = False
            elif key == "latest-last":
                try:
                    self.List.DisplayKnownDevices(autoselect=True)
                except:
                    pass

        def on_bt_status_changed(status):
            if not status:
                self.window.hide()
                check_bluetooth_status(_("Bluetooth needs to be turned on for the device manager to function"),
                                       lambda: Gtk.main_quit())
            else:
                self.window.show()

        def on_bluez_name_owner_changed(owner):
            dprint('org.bluez owner changed to ', owner)
            if owner == '':
                self.window.hide()
                d = Gtk.MessageDialog(self.window, type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.CLOSE)
                d.props.icon_name = "blueman"
                d.props.text = _("Connection to BlueZ failed")

                d.props.secondary_text = _(
                    "Bluez daemon is not running, blueman-manager cannot continue.\nThis probably means that there were no Bluetooth adapters detected or Bluetooth daemon was not started.")

                d.run()
                d.destroy()
                try:
                    exit(1)
                except:
                    Gtk.main_quit()
            else:

                setup_icon_path()

                self.Config = Config()

                try:
                    self.Applet = AppletService()
                except:
                    print("Blueman applet needs to be running")
                    exit()
                try:
                    if not self.Applet.GetBluetoothStatus():
                        on_bt_status_changed(False)
                except:
                    pass
                self.Applet.Handle("BluetoothStatusChanged", on_bt_status_changed)

                self.window.connect("delete-event", on_window_delete)
                self.window.props.icon_name = "blueman"

                h = self.Config.props.window-height
                w = self.Config.props.window-width
                if w != None and h != None:
                    self.window.resize(w, h)

                x = self.Config.props.window-posx
                y = self.Config.props.window-posy
                if x and y:
                    self.window.move(x, y)

                sw = self.Builder.get_object("scrollview")

                self.List = ManagerDeviceList(adapter=self.Config.props.last-adapter, inst=self)

                self.List.show()
                sw.add(self.List)

                self.Toolbar = ManagerToolbar(self)
                self.Menu = ManagerMenu(self)
                self.Stats = ManagerStats(self)

                if self.List.IsValidAdapter():
                    self.List.DisplayKnownDevices(autoselect=True)

                self.List.connect("adapter-changed", self.on_adapter_changed)

                self.Config.connect("property-changed", on_property_changed)

                if self.Config.props.show-toolbar != None:
                    on_property_changed(self.Config, "show-toolbar", self.Config.props.show-toolbar)

                if self.Config.props.show-statusbar != None:
                    on_property_changed(self.Config, "show-statusbar", self.Config.props.show-statusbar)

                self.window.show()

        dbus.SystemBus().watch_name_owner('org.bluez', on_bluez_name_owner_changed)
        Gtk.main()

    def on_adapter_changed(self, list, adapter):
        if adapter != None:
            self.List.DisplayKnownDevices(autoselect=True)

    def add_device(self, device):
        # BlueZ 4 only!

        def ok(device):
            dev = Device(device)
            self.List.add_device(dev)
            prog.finalize()
            MessageArea.close()

        def err(*args):
            prog.finalize()
            MessageArea.show_message(e_(str(args[0])))

        adapter = self.List.Adapter

        prog = ManagerProgressbar(self, text=_("Adding"))
        prog.connect("cancelled", lambda x: self.List.Adapter.get_interface().CancelDeviceCreation(device.Address))

        prog.start()
        adapter.create_device(device.Address, reply_handler=ok, error_handler=err)

    def inquiry(self):
        def prop_changed(List, adapter, (key, value)):
            if key == "Discovering" and not value:
                prog.finalize()
                self.List.disconnect(s1)
                self.List.disconnect(s2)

        def on_progress(list, frac):
            if abs(1.0 - frac) <= 0.00001:
                if not prog.started():
                    prog.start()
            else:
                prog.fraction(frac)

        prog = ManagerProgressbar(self, text=_("Searching"))
        prog.connect("cancelled", lambda x: self.List.StopDiscovery())
        try:
            self.List.DiscoverDevices()
        except Exception as e:
            prog.finalize()
            MessageArea.show_message(e_(e))

        s1 = self.List.connect("discovery-progress", on_progress)
        s2 = self.List.connect("adapter-property-changed", prop_changed)

    def setup(self, device):
        sn = startup_notification("Bluetooth Assistant", _("Starting Bluetooth Assistant"),
                                  bin_name="blueman-assistant", icon="blueman")
        spawn(["blueman-assistant", "--device=%s" % device.Address], sn=sn)

    def bond(self, device):
        if BlueZInterface.get_interface_version()[0] < 5:
            def ok(device):
                dev = Device(BluezDevice(device))
                self.List.add_device(dev)
                prog.message(_("Success"))
                MessageArea.close()

            def err(*args):
                dprint(args)
                prog.message(_("Failure"))
                MessageArea.show_message(e_(str(args[0])))

            applet = AppletService()

            address = device.get_properties()["Address"]
            adapter = self.List.Adapter

            prog = ManagerProgressbar(self, text=_("Pairing"))
            prog.connect("cancelled", lambda x: applet.CancelDeviceCreation(adapter.get_object_path(), device.Address))
            prog.start()

            name = adapter_path_to_name(self.List.Adapter.get_object_path())

            applet.CreateDevice(adapter.get_object_path(), device.Address, True, Gtk.get_current_event_time(),
                                reply_handler=ok, error_handler=err, timeout=120)
        else:
            self.List.Adapter.find_device(device.Address).pair()

    def adapter_properties(self):
        adapter = self.List.Adapter
        name = os.path.basename(adapter.get_object_path())
        sn = startup_notification("Blueman Adapters", _("Starting Adapter Preferences"), bin_name="blueman-adapters",
                                  icon="blueman")
        spawn(["blueman-adapters", name], sn=sn)

    def toggle_trust(self, device):
        props = device.get_properties()
        device.Trusted = not device.Trusted

    def send(self, device, File=None):
        sn = startup_notification("Blueman Sendto", _("Starting File Sender"), bin_name="blueman-sendto",
                                  icon="blueman")
        adapter = self.List.Adapter
        props = adapter.get_properties()
        spawn(["blueman-sendto", "--source=%s" % props["Address"], "--device=%s" % device.Address], sn=sn)

    def remove(self, device):
        self.List.Adapter.remove_device(device.Device)

    def browse(self, device):
        spawn(["blueman-browse", "-d %s" % device.Address])

    def disconnect(self, device, *args, **kwargs):
        applet = AppletService()
        applet.DisconnectDevice(device.get_object_path(), *args, **kwargs)


Blueman()
