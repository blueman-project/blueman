#!@PYTHON@
import os
import sys
import signal
import logging
import gettext

# support running uninstalled
if 'BLUEMAN_SOURCE' in os.environ:
    _builddir = os.path.abspath(os.path.dirname(__file__))
    module_dir = os.path.join(_builddir, "module")
    blueman_dir = os.path.join(_builddir, "blueman")
    sys.path = [module_dir, blueman_dir] + sys.path
    os.environ["GSETTINGS_SCHEMA_DIR"] = os.path.join(_builddir, "data")

gettext.textdomain("@GETTEXT_PACKAGE@")

from blueman.Functions import create_parser, create_logger, set_proc_title
from blueman.main.Adapter import BluemanAdapters


if __name__ == '__main__':
    parser = parser = create_parser()
    parser.add_argument("--socket-id", dest="socket_id", action="store", type=int, metavar="ID")
    parser.add_argument("adapter", nargs="?", metavar="ADAPTER NAME")
    args = parser.parse_args()

    if args.LEVEL.upper() == "DEBUG":
        log_level = logging.DEBUG
    elif args.LEVEL.upper() == "INFO":
        log_level = logging.INFO
    elif args.LEVEL.upper() == "WARNING":
        log_level = logging.WARNING
    elif args.LEVEL.upper() == "ERROR":
        log_level = logging.ERROR
    elif args.LEVEL.upper() == "CRITICAL":
        log_level = logging.CRITICAL
    else:
        log_level = logging.WARNING

    create_logger(log_level, "blueman-adapters", syslog=args.syslog)

    set_proc_title()

    app = blueman_adapters = BluemanAdapters(args.adapter, args.socket_id)
    app.run()
