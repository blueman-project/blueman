#!/usr/bin/env python@PYTHON_MAJOR_VERSION@
# coding=utf-8

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

import os, sys, signal
import atexit
import logging

#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if 'BLUEMAN_SOURCE' in os.environ:
    sys.path.insert(0, _dirname)
    os.environ["GSETTINGS_SCHEMA_DIR"] = os.path.join(_dirname, "data")

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk

from blueman.Functions import setup_icon_path, check_bluetooth_status, set_proc_title, create_parser, create_logger
from blueman.main.Sendto import Sender
from blueman.bluez.Manager import Manager
from blueman.gui.DeviceSelectorDialog import DeviceSelectorDialog

#support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if 'BLUEMAN_SOURCE' in os.environ:
    sys.path.insert(0, _dirname)
    os.environ["GSETTINGS_SCHEMA_DIR"] = os.path.join(_dirname, "data")

# Workaround introspection bug, gnome bug 622084
signal.signal(signal.SIGINT, signal.SIG_DFL)


class SendTo:
    def __init__(self, parsed_args):
        setup_icon_path()

        check_bluetooth_status(_("Bluetooth needs to be turned on for file sending to work"), lambda: exit())

        if not parsed_args.files:
            self.files = self.select_files()
        else:
            self.files = [os.path.abspath(f) for f in parsed_args.files]

        self.device = None
        self.adapter = None

        if parsed_args.delete:
            def delete_files():
                for file in self.files:
                    os.unlink(file)
            atexit.register(delete_files)

        if parsed_args.device is None:
            if not self.select_device():
                exit()

            self.do_send()

        else:
            m = Manager()
            try:
                if parsed_args.source is not None:
                    try:
                        adapter = m.get_adapter(parsed_args.source)
                    except:
                        adapter = m.get_adapter()
                else:
                    adapter = m.get_adapter()
            except:
                logging.error("Error: No Adapters present")
                exit()
            d = m.find_device(parsed_args.device, adapter.get_object_path())
            if d is None:
                exit("Unknown bluetooth device")

            self.device = d
            self.adapter = adapter.get_object_path()
            self.do_send()

    def do_send(self):
        if not self.files:
            logging.warning("No files to send")
            exit()

        sender = Sender(self.device, self.adapter, self.files)

        def on_result(sender, res):
            Gtk.main_quit()

        sender.connect("result", on_result)

    def select_files(self):
        d = Gtk.FileChooserDialog(_("Select files to send"), buttons=("_Cancel", Gtk.ResponseType.REJECT,
                                                                      "_OK", Gtk.ResponseType.ACCEPT))
        d.props.icon_name = "blueman-send-file"
        d.set_select_multiple(True)
        resp = d.run()

        if resp == Gtk.ResponseType.ACCEPT:
            files = d.get_filenames()
            d.destroy()
            return files
        else:
            d.destroy()
            return []

    def select_device(self):
        d = DeviceSelectorDialog()
        resp = d.run()
        if resp == Gtk.ResponseType.ACCEPT:
            sel = d.GetSelection()
            if sel:
                self.device = sel[1]
                self.adapter = sel[0]
                return True
            else:
                return False
        else:
            return False

if __name__ == '__main__':
    parser = create_parser(syslog=True)
    parser.add_argument("-d", "--device", "--dest", dest="device", action="store",
                        help=_("Send files to this device"), metavar="ADDRESS")
    parser.add_argument("-s", "--source", dest="source", action="store",
                        help=_("Source adapter. Takes address or adapter's name eg. hci0"), metavar="PATTERN")
    parser.add_argument("-u", "--delete", dest="delete", action="store_true", help=_("Delete files on exit"))
    parser.add_argument("files", nargs="*", metavar="FILE",
                        help=_("Files to be send to the bluetooth device"))

    args = parser.parse_args()

    if args.LEVEL.upper() == "DEBUG":
        log_level = logging.DEBUG
    elif args.LEVEL.upper() == "INFO":
        log_level = logging.INFO
    elif args.LEVEL.upper() == "WARNING":
        log_level = logging.WARNING
    elif args.LEVEL.upper() == "ERROR":
        log_level = logging.ERROR
    elif args.LEVEL.upper() == "CRITICAL":
        log_level = logging.CRITICAL
    else:
        log_level = logging.WARNING

    create_logger(log_level, "blueman-sendto", syslog=args.syslog)

    set_proc_title()
    SendTo(args)
    Gtk.main()
