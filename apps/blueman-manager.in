#!@PYTHON@
import sys
import os
import logging
import gettext

resource_file = "@pkgdatadir@/blueman.gresource"
settings_path = os.path.join("@settings_path@", "settings.json")
src_paths = {}

# support running uninstalled
_dirname = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if 'BLUEMAN_SOURCE' in os.environ:
    sys.path = [_dirname, os.path.join(_dirname, 'module', '.libs')] + sys.path
    os.environ["GSETTINGS_SCHEMA_DIR"] = os.path.join(_dirname, "data")
    resource_file = os.path.join(_dirname, "data", "blueman.gresource")
    settings_path = os.path.join(_dirname, "data", "configs", "settings.json")
    src_paths.update({
        "bindir": os.path.join(_dirname, "apps"),
        "rfcomm_watcher_path": os.path.join(_dirname, "apps")
    })


gettext.textdomain("@GETTEXT_PACKAGE@")

from blueman.main.Manager import Blueman
from blueman.config.Settings import BluemanSettings
from blueman.Functions import set_proc_title, create_parser, create_logger, load_json

settings = load_json(settings_path, src_paths)
bm_settings = BluemanSettings(**settings)

if __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()

    if args.LEVEL.upper() == "DEBUG":
        log_level = logging.DEBUG
    elif args.LEVEL.upper() == "INFO":
        log_level = logging.INFO
    elif args.LEVEL.upper() == "WARNING":
        log_level = logging.WARNING
    elif args.LEVEL.upper() == "ERROR":
        log_level = logging.ERROR
    elif args.LEVEL.upper() == "CRITICAL":
        log_level = logging.CRITICAL
    else:
        log_level = logging.WARNING

    create_logger(log_level, "blueman-manager", syslog=args.syslog)

    app = Blueman(resource_file, bm_settings)
    set_proc_title()
    app.run()
